from flask import Flask, request, jsonify
from pyarabic.araby import strip_tashkeel, normalize_hamza
import re
from fuzzywuzzy import fuzz
# إعداد Flask
app = Flask(__name__)

# قائمة الكلمات المفتاحية لتقييم الإجابات
keywords = {
    1: ["التحديات التقنية", "مشاريع سابقة", "حلول مبتكرة", "مشاكل تقنية", "تقنيات جديدة", "حلول معقدة", "صعوبات", "ابتكار", "تحسين الأداء", 
        "إبداع", "تكنولوجيا متطورة", "إدارة المخاطر التقنية", "تصميم الأنظمة", "تطوير البرمجيات", "تحديات البنية التحتية"],
    2: ["البرمجة الكائنية", "Object-Oriented Programming", "الوراثة", "التعددية الشكلية", "التغليف", "الفئات", "الكائنات", "إعادة الاستخدام", 
        "التجريد", "مبادئ التصميم", "البرمجة الديناميكية", "البرمجة المستندة إلى الكائنات", "البرمجة المتقدمة", "تصميم الأنظمة الكائنية", 
        "تقنيات الكود المهيكل", "تحليل النظم", "نماذج UML", "أنماط التصميم"],
    3: ["تحسين الأداء", "قاعدة البيانات", "استعلامات سريعة", "فهرسة", "مؤشرات الأداء", "تقنيات تحسين", "اختبارات الأداء", "التوازي", 
        "أداء قاعدة البيانات", "تخزين البيانات", "تحليل البيانات", "نظم إدارة البيانات", "تصميم قواعد البيانات", "SQL", "NoSQL", 
        "أداء المعاملات", "الأداء العالي", "الإنتاجية", "إدارة الكفاءة"],
    4: ["HTTP", "HTTPS", "تشفير", "أمان البيانات", "الشهادات الرقمية", "البروتوكولات", "اتصال آمن", "تحقق من الهوية", "المصادقة", 
        "التوثيق", "أمن الشبكات", "الخصوصية", "التشفير المتقدم", "إدارة المفاتيح", "الحماية من الهجمات", "Firewall", "SSL", "TLS", 
        "الأمان السحابي", "التحقق الثنائي"],
    5: ["ضغط العمل", "إدارة الوقت", "التعامل مع ضغوط العمل", "أداء فعال", "التنظيم", "الاستراتيجيات", "المرونة", "التحكم في الإجهاد", 
        "التخطيط", "توازن العمل والحياة", "التعامل مع التوتر", "إدارة الأولويات", "الكفاءة", "الإنتاجية الشخصية", "القدرة على التركيز", 
        "تنظيم المهام", "المرونة النفسية", "حل الأزمات"],
    6: ["نقاط القوة", "نقاط الضعف", "التطوير الذاتي", "القدرة على التعلم", "التحديات الشخصية", "المهارات", "التواصل", "التحليل النقدي", 
        "حل المشكلات", "التفكير الإبداعي", "مهارات القيادة", "القدرة على العمل الجماعي", "التعلم المستمر", "تطوير الذات", "إدارة العواطف", 
        "النمو الشخصي", "الإبداع الشخصي", "المرونة الفكرية", "تحليل النقاط الشخصية"],
    7: ["قياس النجاح", "نجاح المشروع", "الأهداف", "التقييم", "المؤشرات", "التخطيط الاستراتيجي", "التسليم في الوقت المحدد", "النتائج", 
        "الربحية", "تسليم المشروع", "إدارة الأداء", "التحليل الربحي", "قياس الأداء", "إدارة الموارد", "إنجاز المهام", "الرضا الوظيفي", 
        "إدارة العمليات", "الإبداع في التنفيذ", "إدارة الجودة"],
    8: ["إدارة الوقت", "استراتيجيات فعالة", "إنتاجية", "التخطيط", "التنظيم", "ترتيب الأولويات", "التوجيه الذاتي", "التركيز", 
        "التوازن بين العمل والحياة", "الإنتاجية العالية", "التخطيط الذكي", "مهارات إدارة الوقت", "تحقيق الأهداف", "إدارة المشاريع الصغيرة", 
        "التنظيم الذاتي", "إدارة المواعيد", "تقنيات إدارة المهام", "تقسيم الوقت", "التفويض الفعال"]
}


# دالة لتنظيف النص العربي وإعداده للتحليل
def preprocess_arabic_text(text):
    """
    تنظيف النص العربي من التشكيل والعلامات الزائدة.
    """
    # إزالة التشكيل
    text = strip_tashkeel(text)
    # توحيد الهمزات
    text = normalize_hamza(text)
    # إزالة الرموز والعلامات غير الضرورية
    text = re.sub(r'[^\w\s]', '', text)
    # تحويل النص إلى حروف صغيرة
    text = text.lower()
    return text


# دالة لتقييم الإجابة بناءً على كلمات مفتاحية باللغة العربية
def evaluate_answer_logic(question_id, answer_text):
    """
    تقييم الإجابة بناءً على كلمات مفتاحية باللغة العربية.
    """
    # تنظيف الإجابة
    clean_text = preprocess_arabic_text(answer_text)

    # استخراج الكلمات المفتاحية للسؤال
    relevant_keywords = keywords.get(question_id, [])
    
    # حساب عدد الكلمات المفتاحية الموجودة في النص باستخدام تعبيرات عادية (Regex)
    score = 0
    for keyword in relevant_keywords:
        if fuzz.partial_ratio(keyword, clean_text) > 70:  # تطابق جزئي مع حد أدنى
            score += 1
    
    # تعيين درجة بين 1 و 10
    score = min(10, score)  # الحد الأقصى للدرجة هو 10

    # إعداد التعليق بناءً على درجة الإجابة
    if score < 5:
        feedback = "الإجابة بحاجة إلى المزيد من التفاصيل."
    else:
        feedback = "الإجابة جيدة ومكتملة."

    return score, feedback

# نقطة نهاية لتقييم الإجابات
@app.route('/evaluate', methods=['POST'])
def evaluate():
    try:
        # استلام البيانات من الطلب
        data = request.json
        question_id = data.get('questionId')
        answer_text = data.get('answerText')

        if not question_id or not answer_text:
            return jsonify({"error": "بيانات الإدخال غير صحيحة"}), 400

        # تقييم الإجابة
        score, feedback = evaluate_answer_logic(question_id, answer_text)

        # إرجاع النتيجة والتعليقات
        return jsonify({"score": score, "feedback": feedback})
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # تشغيل الخدمة على المنفذ 5000
    app.run(debug=True, port=5001)
